> item 47. 반환 타입으로는 스트림보다 컬렉션이 낫다
> 

## [**Java8 이후 원소 시퀀스를 반환하는 방법**](https://jake-seo-dev.tistory.com/459#Java-%--%EC%-D%B-%ED%-B%--%--%EC%-B%--%EC%--%-C%--%EC%-B%-C%ED%--%--%EC%-A%A-%EB%A-%BC%--%EB%B-%--%ED%--%--%ED%--%--%EB%-A%--%--%EB%B-%A-%EB%B-%--)

- 기존에는 `Collection`, `Iterable` 이라는 선택지가 존재했다.
- Java8 이후로는 `Stream` 이라는 선택지가 하나 더 늘었다.
- `Stream` 은 반환 타입으로 사용하기보다는 단순히 컬렉션 처리를 위해 사용하는 것이 좋다.
- 반환은 다시 컬렉션으로 변경해주는 것이 활용성이 좋다.
    - `someStream.collect(Collectors.toList())` 와 같은 함수를 이용하면 쉽다.
    
    ### 스트림은 반복(iteration)을 지원하지 않는다.
    
    스트림은 **반복(iteration)**을 지원하지 않기 때문에 원소 시퀀스를 반환할때 스트림을 사용하면 아래와 같이 `for-each` 로 반복을 수행할 수 없다.
    
    ```java
    static Stream<ProcessHandle> allProcesses()
    
    // Stream.iterator 사용
    for(ProcessHandle p: ProcessHandle.allProcesses.iterator()) {
    
    }
    ```
    
    `for-each` 와 같이 향상된 for 문이 가능한 컬렉션은 `Iterable` 인터페이스를 구현하고 있어야 하기 때문이다. 
    
    Stream 인터페이스는 Iterable 인터페이스가 정의한 추상 메서드를 전부 포함할 뿐만 아니라, Iterable 인터페이스가 정의한 방식대로 동작한다.하지만 `Stream` 인터페이스는 `Iterable`을 **확장(extend)** 하지 않았기 때문에 반복이 불가능하다.
    
    ```java
    
    ```
    
    그렇다면 스트림을 반복할 수 있게 하려면 어떻게 해야 할까?
    
    ### ☁️ 어댑터(Adapter)
    
    ### 1) Stream -> Iterable
    
    `Stream<E>` 를 `Iterable<E>` 로 중개해주는 어댑터이다.
    
    ```java
    public static <E> Iterable<E> iterableOf(Stream<E> stream) {
            return stream::iterator;
    }
    ```
    
    ```java
    for(ProcessHandle p : iterableOf(ProcessHandle.allProcesses())){
    }
    ```
    
    어댑터를 사용한다면, 어떤 스트림도 `for-each` 문으로 반복할 수 있다. 참고로 자바의 타입 추론이 문맥을 잘 파악하기 때문에 어댑터 메서드 안에서 따로 형변환 하지 않아도 된다.
    
    ### 2) Iterable -> Stream
    
    반대로 `Iterable<E>` 를 `Stream<E>` 로 변환해주는 어댑터도 다음과 같이 쉽게 구현 가능하다.
    
    ```java
    public static <E> Stream<E> streamOf(Iterable<E> iterable) {
           return StreamSupport.stream(iterable.spliterator(), false);
    }
    ```
    
    ### ☁️ Collection 인터페이스
    
    객체 시퀀스를 반환하는 메서드를 할 때, 스트림 파이프라인과 반복문 둘 중에 한 방식만 사용할 거라는 근거가 없으므로 어댑터를 쓰기 애매하다.
    
    하지만 `Collection` 인터페이스는 `Iterable`의 하위 타입이고 `stream` 메서드도 제공하니 **반복과 스트림을 동시에 지원**한다. 따라서 **원소 시퀀스를 반환하는 공개 API의 반환 타입**에는 `Collection` 이나 그 하위 타입을 쓰도록 하자.
    
    ```java
    public interface Collection<E> extends Iterable<E> {
        ...
        default Stream<E> stream() {
            return StreamSupport.stream(spliterator(), false);
        }
    
        default Stream<E> parallelStream() {
            return StreamSupport.stream(spliterator(), true);
        }
    }
    ```
    
    ### Collection 타입이 나은 경우
    
    > 원소 사이즈가 작은 경우 : 표준 컬렉션원소 사이즈가 큰 경우 : 전용 컬렉션 구현
    > 
    
    반환할 시퀀스가 크지만 표현을 간결하게 할 수 있다면, 전용 컬렉션을 구현할 수 있다.
    
    > 멱집합: 모든 부분집합를 원소로 하는 집합
    > 
    
    다음의 예제를 보면, 멱집합의 경우 원소의 개수가 `n`개일때 멱집합의 원소 개수는 `2^n` 개가 되므로, 표준 컬렉션 구현체에 저장하면 위험하다. 따라서 아래와 같이 `AbstractList` 를 이용해서 각 원소의 인덱스를 비트 마스킹을 사용하는 방식으로 바꿀 수 있다. 
    
    > 🔖 {a, b, c} 의 멱집합 표현하기
    > 
    > 
    > ```
    > 000 : {}
    > 001 : {a}
    > ...
    > 111 : {a, b, c}
    > ```
    > 
    
    ```java
    public class PowerSet {
        public static final <E> Collection<Set<E>> of(Set<E> s) {
            List<E> src = new ArrayList<>(s);
            if (src.size() > 30)
                throw new IllegalArgumentException(
                    "집합에 원소가 너무 많습니다(최대 30개).: " + s);
    
            return new AbstractList<Set<E>>() {
                @Override public int size() {
                    // 멱집합의 크기는 2를 원래 집합의 원소 수만큼 거듭제곱 것과 같다.
                    return 1 << src.size();
                }
    
                @Override public boolean contains(Object o) {
                    return o instanceof Set && src.containsAll((Set)o);
                }
    
    			// 인덱스 n 번째 비트 값 : 해당 원소가 원래 집합의 n 번째 원소를 포함하는지 여부
                @Override public Set<E> get(int index) {
                    Set<E> result = new HashSet<>();
                    for (int i = 0; index != 0; i++, index >>= 1)
                        if ((index & 1) == 1)
                            result.add(src.get(i));
                    return result;
                }
            };
        }
    }
    ```
    
    ### 스트림 사용이 더 니은 경우
    
    입력 리스트의 모든 부분 리스트 반환해야 하는 상황이다.
    
    일반적으로 `O(N^2)` 성능이 나오는 이중 반복문 방식을 사용할 수 있지만, 이렇게 되면 해당 컬렉션은 입력 리스트 크기의 거듭제곱만큼 메모리를 차지하게 된다.
    
    ```java
    for (int start = 0; start < src.size(); start++) {
    	for (int end = start + 1; end <= src.size(); end++) {
        	System.out.println(src.subList(start, end));
        }
    }
    ```
    
    모든 부분 리스트를 `prefix + suffix + {}` 로 분리해서 볼 수 있는데, 이는 스트림을 통해 가독성 좋게 구현할 수 있다.
    
    - 첫 번째 원소를 포함하는 부분리스트를 그 리스트의 prefix라 해보자.
        - (a, b, c)의 prefix는 (a), (a, b), (a, b, c)가 된다.
    - 같은 식으로 마지막 원소를 포함하는 부분리스트를 그 리스트의 suffix라 하자.
        - (a, b, c)의 suffix는 (a, b, c), (b, c), (c)가 된다.
    - 어떤 리스트의 부분리스트는 단순히 그 리스트의 prefix의 suffix(혹은 suffix의 prefix)에 빈 리스트 하나만 추가하면 된다.
    
    ```java
    public class SubLists {
        public static <E> Stream<List<E>> of(List<E> list) {
            return Stream.concat(Stream.of(Collections.emptyList()),
                    prefixes(list).flatMap(SubLists::suffixes));
        }
    
        private static <E> Stream<List<E>> prefixes(List<E> list) { // (a), (a,b), (a,b,c)
            return IntStream.rangeClosed(1, list.size())
                    .mapToObj(end -> list.subList(0, end));
        }
    
        private static <E> Stream<List<E>> suffixes(List<E> list) { // (a,b,c), (b,c), (c)
            return IntStream.range(0, list.size())
                    .mapToObj(start -> list.subList(start, list.size()));
        }
    }
    ```
    
    - Stream.concat 메서드는 반환되는 스트림에 빈 리스트를 추가
    - flatMap 메서드는 모든 prefix에 대한 모든 suffix를 추출하여 하나의 스트림을 만듦
    
    **코드 흐름 정리**
    
    1. 각 prefix에 대해 suffixes 메서드를 적용하여 평탄화 (flatten)
    
    • prefix = [a]에 대해 suffixes([a])는 [[a]]를 반환합니다.
    • prefix = [a, b]에 대해 suffixes([a, b])는 [[a, b], [b]]를 반환합니다.
    • prefix = [a, b, c]에 대해 suffixes([a, b, c])는 [[a, b, c], [b, c], [c]]를 반환합니다.
    
    1. flatMap은 이 모든 리스트를 평탄화하여 하나의 스트림으로 만듭니다:
    
    [[a], [a, b], [b], [a, b, c], [b, c], [c]]
    
    1. 빈 리스트 추가
    
    마지막으로, Stream.concat(Stream.of(Collections.emptyList()), ...)를 사용하여 빈 리스트를 추가합니다:
    
    [[], [a], [a, b], [b], [a, b, c], [b, c], [c]]
    
    > 📚 핵심 정리
    > 
    > 
    > 반환 전부터 이미 원소들을 컬렉션에 담아 관리하고 있거나 원소 개수가 적다면 `ArrayList` 과 같은 표준 컬렉션에 담아 반환하자. 그렇지 않다면, 전용 컬렉션을 구현할 수도 있다. 컬렉션을 반환하는게 불가능하다면 스트림과 `Iterable` 중 더 자연스러운 것을 반환하면 된다.
    >